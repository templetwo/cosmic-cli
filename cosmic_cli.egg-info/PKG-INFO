Metadata-Version: 2.1
Name: cosmic-cli
Version: 0.1.0
Summary: The Ultimate Cosmic CLI: Grok's Terminal Portal - Smarter, Funnier, and More Powerful than Gemini/Claude
Home-page: https://github.com/your_github_username/cosmic-cli
Author: Flamebearer
Author-email: your.email@example.com
Keywords: cosmic xai cli ai terminal
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Utilities
Description-Content-Type: text/markdown

# 🌟 Cosmic CLI: The Self-Correcting, Context-Aware Agent for Your Terminal

> **An intelligent, agentic CLI powered by Grok that understands your codebase, reasons about your directives, and executes multi-step plans.**

Cosmic CLI transcends traditional command-line tools. It's a true AI agent that lives in your terminal. Powered by xAI's Grok-4, it features a sophisticated, step-by-step execution loop, allowing it to reason, self-correct, and tackle complex tasks with a deep understanding of your project's context.

## ✨ Core Features

- **🚀 Agentic Execution Engine (`StargazerAgent`):**
  - **Step-by-Step Reasoning:** Doesn't just follow a script. It consults Grok for the single best next action at every step.
  - **Contextual Memory:** Remembers the results of its actions (files read, commands run) to make smarter subsequent decisions.
  - **Self-Correction:** If a step fails, the error becomes part of the context, allowing the agent to dynamically find a new solution.
  - **Multi-Modal Commands:** Seamlessly executes shell commands (`SHELL:`), runs Python code (`CODE:`), reads files (`READ:`), and gathers information (`INFO:`).

- **🌌 Rich, Interactive TUI:**
  - Built with **Textual**, providing a modern, app-like experience in the terminal.
  - A dynamic **"COSMIC CLI"** banner that sets a cosmic tone.
  - An interactive **Directives Table** to view agent tasks.
  - A collapsible **Live Logs Panel** to monitor the agent's thoughts and actions in real-time.

- **🧠 Deep Context Awareness (`ContextManager`):**
  - **Automatic Project Scanning:** Instantly understands your project's file structure.
  - **Intelligent File Reading:** Can be directed to read specific files to inform its actions.
  - **Full Context Prompts:** Provides Grok with the file tree and relevant file contents, ensuring highly relevant and accurate responses.

- **💾 Memory Persistence & Safety:**
  - Standard chat history is saved between sessions.
  - Agent execution includes safety modes (`safe`, `interactive`) to prevent accidental execution of dangerous commands.

## 🚀 Installation

```bash
# Clone the repository
git clone <your-repo-url>
cd cosmic-cli

# Create and activate virtual environment
python3 -m venv venv
source venv/bin/activate

# Install in editable mode
pip install -e .
```

## ⚙️ Configuration

1.  Obtain your API key from the [xAI Console](https://console.x.ai).
2.  Create a `.env` file in the project root:
    ```
    XAI_API_KEY=your_xai_api_key_here
    ```

## 🎯 Usage

The primary entry point for agentic tasks is the `stargazer deploy` command.

### Example 1: Codebase Question Answering
```bash
cosmic-cli stargazer deploy 'Read the main.py file and summarize what the "stargazer" command group does.'
```
> The agent will first `READ: cosmic_cli/main.py`, then use that context to `FINISH:` with an accurate summary.

### Example 2: Simple Refactoring
```bash
cosmic-cli stargazer deploy 'In cosmic_cli/main.py, find the COsmic_QUOTES list and add a new quote: "Hello from the cosmos!"'
```
> The agent will read the file, generate Python code to modify it, and execute that code.

### Example 3: Complex, Multi-Step Tasks
```bash
cosmic-cli stargazer deploy 'Create a new file called "hello.txt" with the content "Hello, World!", then verify its content using the "cat" command.'
```
> The agent will chain a `CODE:` or `SHELL:` command to create the file, followed by a `SHELL:` command to verify it.

## 🏗️ Development & Architecture

The `cosmic-cli` is built on a modular, agentic architecture.

-   `cosmic_cli/main.py`: The **CLI entry point** using `click`. It handles command parsing and launches the agent or UI.
-   `cosmic_cli/ui.py`: The **Textual TUI application**. It provides the user interface but is decoupled from the agent's core logic.
-   `cosmic_cli/agents.py`: The **heart of the CLI**. Contains the `StargazerAgent` with its intelligent, step-by-step execution loop and context memory.
-   `cosmic_cli/context.py`: The **context engine**. The `ContextManager` is responsible for scanning the file system and providing context to the agent.

## 🧪 Testing

```bash
# Ensure you have the dev dependencies installed
pip install pytest pytest-cov

# Run the full test suite
pytest
```

## 🤝 Contributing

Contributions that enhance the agent's intelligence, expand its capabilities, or polish the UI are welcome.

1.  Fork the repository.
2.  Create your feature branch (`git checkout -b feature/AmazingFeature`).
3.  Commit your changes (`git commit -m 'Add some AmazingFeature'`).
4.  Push to the branch (`git push origin feature/AmazingFeature`).
5.  Open a Pull Request.

## 📄 License

Distributed under the MIT License.

---

**Built with ❤️ and cosmic energy.** 🌌✨

