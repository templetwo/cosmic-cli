Metadata-Version: 2.4
Name: grok-cli
Version: 0.1.0
Summary: The Ultimate Cosmic CLI: Grok's Terminal Portal - Smarter, Funnier, and More Powerful than Gemini/Claude
Home-page: https://github.com/your_github_username/grok-cli
Author: Flamebearer
Author-email: your.email@example.com
Keywords: grok xai cli ai terminal
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Utilities
Description-Content-Type: text/markdown
Requires-Dist: click
Requires-Dist: python-dotenv
Requires-Dist: xai-sdk
Requires-Dist: rich
Requires-Dist: pyfiglet
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: requires-dist
Dynamic: summary

# 🌟 The Ultimate Cosmic CLI: Grok's Terminal Portal

> **Smarter, Funnier, and More Powerful than Gemini/Claude**

A powerful and interactive command-line interface (CLI) designed to interact with xAI's Grok API. It provides a seamless and engaging conversational experience, along with advanced features for file analysis and AI-powered terminal hacks.

## ✨ Features

- **🚀 Interactive Chat:** Engage in multi-turn conversations with Grok
- **🌌 Cosmic Flair:** Enjoy a visually appealing interface with ASCII art and cosmic-themed responses
- **📁 File Analysis:** Have Grok analyze the content of your text files
- **⚡ AI-Powered Terminal Hacks:** Get intelligent suggestions for productivity, fun, and learning
- **💾 Memory Persistence:** Conversations are saved between sessions
- **🔒 Safety Features:** Command execution with confirmation prompts
- **📦 Pip-Installable:** Easily install and use like any other Python package
- **🧪 Comprehensive Testing:** 100% test coverage with pytest

## 🚀 Installation

### From Source
```bash
# Clone the repository
git clone <your-repo-url>
cd grok-cli

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install in development mode
pip install -e .
```

### From PyPI (when published)
```bash
pip install grok-cli
```

## ⚙️ Configuration

1. **Get your xAI API key** from [xAI's platform](https://x.ai)
2. **Create a `.env` file** in your project directory:
   ```bash
   XAI_API_KEY=your_api_key_here
   ```

## 🎯 Usage

### Basic Commands
```bash
# Show help
grok-cli --help

# Start interactive chat
grok-cli chat

# Ask a single question
grok-cli ask "What is the meaning of life?"

# Analyze a file
grok-cli analyze /path/to/your/file.txt

# Get AI-powered terminal hacks
grok-cli hack productivity
grok-cli hack fun
grok-cli hack learn

# Run a suggested command (with confirmation)
grok-cli run_command "echo 'Hello, World!'"
```

### Interactive Chat Mode
```bash
grok-cli chat
```
- Type your messages and press Enter
- Type `quit` or `exit` to end the conversation
- Type `reset` to clear conversation history
- All conversations are automatically saved

### File Analysis
```bash
grok-cli analyze README.md
```
Grok will analyze the file content and provide insights, suggestions, or improvements.

### Terminal Hacks
```bash
# Get productivity tips
grok-cli hack productivity

# Get fun commands
grok-cli hack fun

# Get learning commands
grok-cli hack learn
```

## 🧪 Testing

### Run Tests
```bash
# Run all tests
pytest

# Run with coverage report
pytest --cov=main --cov-report=html

# Run specific test file
pytest tests/test_grok_cli.py

# Run with verbose output
pytest -v
```

### Test Coverage
The project includes comprehensive test coverage:
- ✅ Unit tests for all core functions
- ✅ Integration tests for CLI commands
- ✅ Mock testing for external dependencies
- ✅ Error handling tests
- ✅ Memory persistence tests

## 🏗️ Development

### Project Structure
```
grok-cli/
├── main.py              # Core CLI application
├── setup.py             # Package configuration
├── requirements.txt     # Dependencies
├── pytest.ini          # Test configuration
├── tests/              # Test suite
│   ├── __init__.py
│   └── test_grok_cli.py
├── README.md           # Documentation
└── .gitignore          # Git ignore rules
```

### Key Components

#### `GrokCLI` Class
- **State Management:** Manages chat instances and client connections
- **Memory System:** Handles conversation persistence
- **Error Handling:** Comprehensive error handling throughout
- **Type Safety:** Full type hints for better code quality

#### Environment Management
- **Flexible .env Loading:** Supports multiple .env file locations
- **API Key Detection:** Supports both `XAI_API_KEY` and `GROK_API_KEY`
- **Graceful Fallbacks:** Handles missing configuration gracefully

#### CLI Commands
- **`chat`:** Interactive conversation mode
- **`ask`:** Single question mode
- **`analyze`:** File analysis mode
- **`hack`:** AI-powered terminal suggestions
- **`run_command`:** Safe command execution

## 🔧 Technical Details

### Dependencies
- **`click`:** CLI framework
- **`xai-sdk`:** xAI API client
- **`rich`:** Beautiful terminal output
- **`pyfiglet`:** ASCII art generation
- **`pytest`:** Testing framework

### Memory System
- **JSON-based Storage:** Conversations saved to `~/.grok_cli_memory.json`
- **Automatic Persistence:** Messages saved after each interaction
- **Corruption Handling:** Graceful handling of corrupted memory files
- **Reset Functionality:** Easy conversation history clearing

### Safety Features
- **Command Confirmation:** All executed commands require user confirmation
- **Error Handling:** Comprehensive error handling with user-friendly messages
- **File Validation:** Binary file detection for analysis
- **API Error Recovery:** Graceful handling of API failures

## 🌟 What Makes This Special

1. **Cosmic Theme:** Space-themed responses and beautiful ASCII art
2. **Production Ready:** Comprehensive testing and error handling
3. **Type Safe:** Full type hints for better development experience
4. **Memory Persistence:** Conversations saved between sessions
5. **Safety First:** Command execution with confirmation prompts
6. **Flexible Configuration:** Multiple .env file location support
7. **Beautiful UI:** Rich console output with colors and formatting

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Make your changes and add tests
4. Run tests: `pytest`
5. Commit your changes: `git commit -am 'Add feature'`
6. Push to the branch: `git push origin feature-name`
7. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🙏 Acknowledgments

- **xAI** for providing the Grok API
- **Click** for the excellent CLI framework
- **Rich** for the beautiful terminal output library
- **PyFiglet** for the ASCII art capabilities

---

**Built with ❤️ and cosmic energy for the Linux community!** 🌌✨

